// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô app.js ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå debug.js ‡πÉ‡∏´‡∏°‡πà

// Debug Functions
const Debug = {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  checkSystemStatus() {
    console.log("=== SYSTEM STATUS CHECK ===");
    
    // 1. Check Authentication
    console.log("1. Authentication:");
    console.log("   - Authenticated:", Auth.isAuthenticated());
    console.log("   - Current User:", Auth.getCurrentUser());
    console.log("   - Current Store:", Auth.getCurrentStore());
    
    // 2. Check Firebase
    console.log("\n2. Firebase:");
    console.log("   - Connected:", window.FirebaseService && FirebaseService.isAuthenticated());
    console.log("   - Online:", navigator.onLine);
    
    // 3. Check Shift
    console.log("\n3. Shift Status:");
    console.log("   - Shift Open:", ShiftManager.isShiftOpen());
    console.log("   - Current Shift:", ShiftManager.getCurrentShift());
    
    // 4. Check Cart
    console.log("\n4. Cart Status:");
    console.log("   - Items:", Cart.items.length);
    console.log("   - Total:", Cart.getTotal());
    console.log("   - Cart Panel Exists:", !!document.getElementById('cartPanel'));
    
    // 5. Check Data
    console.log("\n5. Data Status:");
    console.log("   - Products:", App.state.products.length);
    console.log("   - Categories:", App.state.categories.length);
    console.log("   - Sales:", App.state.sales.length);
    console.log("   - Members:", App.state.members.length);
    
    // 6. Check Sync
    console.log("\n6. Sync Status:");
    console.log("   - Pending Sync:", SyncManager.syncStatus.pendingSync.length);
    console.log("   - Last Sync:", new Date(SyncManager.syncStatus.lastSync || 0).toLocaleString());
    console.log("   - Is Syncing:", SyncManager.syncStatus.isSyncing);
  },
  
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Cart Panel
  fixCartPanel() {
    console.log("üîß Fixing cart panel...");
    
    // ‡∏•‡∏ö panel ‡πÄ‡∏Å‡πà‡∏≤
    const oldPanel = document.getElementById('cartPanel');
    if (oldPanel) {
      oldPanel.remove();
      console.log("‚úÖ Removed old cart panel");
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á panel ‡πÉ‡∏´‡∏°‡πà
    Cart.createCartPanel();
    console.log("‚úÖ Created new cart panel");
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏¥‡∏î
    Cart.open();
  },
  
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Shift
  async fixShift() {
    console.log("üîß Fixing shift issues...");
    
    // 1. Clean up listeners
    if (ShiftManager.shiftListener) {
      ShiftManager.shiftListener();
      ShiftManager.shiftListener = null;
    }
    
    // 2. Reload shift data
    ShiftManager.loadCurrentShift();
    
    // 3. Setup listener again
    ShiftManager.setupRealtimeListener();
    
    // 4. Update UI
    ShiftManager.updateUI();
    
    console.log("‚úÖ Shift fixed");
  },
  
  // ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö (‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)
  async forceCloseShift() {
    if (!ShiftManager.isShiftOpen()) {
      console.log("‚ùå No shift to close");
      return;
    }
    
    const shift = ShiftManager.currentShift;
    console.log("‚ö†Ô∏è Force closing shift:", shift.employeeName);
    
    // ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ
    await ShiftManager.closeShift(shift.expectedCash, "‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô");
  },
  
  // ‡∏•‡πâ‡∏≤‡∏á shift ‡∏Ñ‡πâ‡∏≤‡∏á
  clearStuckShift() {
    console.log("üîß Clearing stuck shift...");
    
    ShiftManager.currentShift = null;
    ShiftManager.saveCurrentShift();
    ShiftManager.updateUI();
    
    // Clear from local state
    const storeId = App.state.currentStoreId;
    if (storeId) {
      localStorage.removeItem(`currentShift_${storeId}`);
    }
    
    console.log("‚úÖ Shift cleared");
  },
  
  // Force sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async forceSyncAll() {
    console.log("üîÑ Starting force sync...");
    
    try {
      // 1. Sync app data
      await App.syncWithFirebase();
      
      // 2. Sync pending items
      await SyncManager.syncPendingData();
      
      // 3. Reload from Firebase
      await App.loadFromFirebase();
      
      console.log("‚úÖ Force sync completed");
      Utils.showToast("Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
    } catch (error) {
      console.error("‚ùå Force sync failed:", error);
      Utils.showToast("Sync ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message, "error");
    }
  },
  
  // Reset ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏∞‡∏ß‡∏±‡∏á!)
  resetSystem() {
    if (!confirm("‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£ reset ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô?")) {
      return;
    }
    
    if (!confirm("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á? ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!")) {
      return;
    }
    
    console.log("üî• RESETTING SYSTEM...");
    
    // Clear all localStorage
    const storeId = App.state.currentStoreId;
    localStorage.removeItem(`posData_${storeId}`);
    localStorage.removeItem(`currentShift_${storeId}`);
    localStorage.removeItem('currentCart');
    localStorage.removeItem('pendingSync');
    
    // Reload page
    location.reload();
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
console.log("üõ†Ô∏è Debug commands available:");
console.log("- Debug.checkSystemStatus() - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö");
console.log("- Debug.fixCartPanel() - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤");
console.log("- Debug.fixShift() - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ shift");
console.log("- Debug.forceCloseShift() - ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô");
console.log("- Debug.clearStuckShift() - ‡∏•‡πâ‡∏≤‡∏á shift ‡∏Ñ‡πâ‡∏≤‡∏á");
console.log("- Debug.forceSyncAll() - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
console.log("- Debug.resetSystem() - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö (‡∏£‡∏∞‡∏ß‡∏±‡∏á!)");

// Export to window
window.Debug = Debug;
